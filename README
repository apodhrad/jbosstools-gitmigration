git_fast_filter.py is designed to make it easy to rewrite the history of a
git repository.  As such it plays a similar role to git-filter-branch, and
was created primarily to overcome the (sometimes severe) speed shortcomings
of git-filter-branch.  The idea of git_fast_filter.py is to serve as a
small library which makes it easy to write python scripts that filter the
output of git-fast-export.  Thus, the calling convention is typically of
the form:

       git fast-export | filter_script.py | git fast-import

Though to be more precise, one would probably run this as

  $ mkdir target && cd target && git init
  $ (cd /PATH/LEADING/TO/source && git fast-export --branches --tags) \
       | /PATH/TO/filter_script.py | git fast-import

Example filter scripts can be found in the testcases subdirectory,
with a brief README file explaining calling syntax for the scripts.

===== Abilities =====

git_fast_filter.py can be used to
  * modify repositories in ways similar to git-filter-branch
  * facilitate the creation of fast-export-like output on some set of data
  * splice together independent repositories (interleaving commits from
    separate repositories)

It has been used to modify file contents, filter out files based on content
and based on name; drop, split, and insert commits; edit author and
committer information; clean up commit log messages (and store excessive
information in git-note format); modify branch names; drop and insert blobs
(i.e. files) and/or commits, splicing together independent repositories
(interleaving commits), and perhaps other small changes I'm forgetting at
the moment.

===== Caveats =====



===== Comparing/contrasting to git-filter-branch =====

* Similar Basics: The basic abilities and warnings in the first three
  paragraphs of the git-filter-branch manpage are equally applicable to
  git_fast_filter.py, except that rev-list options are passed to
  git-fast-export (which, as noted above, is typically executed separately
  in addition to the filter script).  In other words, the tools are very
  similar in purpose.

* Speed of Execution: By virtue of using fast-export and fast-import,
  git_fast_filter avoids lots of forks and bypasses the need to rewrite
  the same file 50,000 times.  (Also, git_fast_filter does not use a
  temporary directory of any sort, and moving repositories to tmpfs to
  accelerate I/O would not significantly speed up the operation.)

* Speed of Development: Since usage of git_fast_filter involves writing a
  separate python script and typically invoking two extra programs, it
  takes longer to invoke than typing git-filter-branch one-liners.  (One
  can have the python script invoke fast-export and fast-import rather than
  doing it on the command line and using pipes, if one wants to.  It's
  still a little bit of extra typing, though.)  Speed of "development" is
  probably more important than speed of execution for many small
  repositories or simple rewrites, thus git-filter-branch will likely
  remain the preferred tool of choice in many cases.

* Location of rewritten History: git-filter-branch always puts the
  rewritten history back into the same repository that holds the original
  history.  That confuses a lot of people; while the same can be done
  with git_fast_filter, examples are geared at writing the new history
  into a different repository.

* Rewritting a subset of history (potential gotcha): When git-fast-export
  operates on a subset of history that does not include a root commit, it
  truncates history before the first exported commits.  This makes sense
  since the destination repository may not have the unexported commits
  already.  (Note that one can use the --import-marks feature to
  git-fast-export to notify fast-export that the destination repository
  does indeed have the needed commits, i.e. that an 'incremental' export is
  being done and thus that history should not be truncated.)  WHY THIS
  MATTERS: git-filter-branch will not truncate history when dealing with a
  subset of history, since it is writing the modified history back to the
  source repository where it is known that the non-rewritten commits are
  available.  If someone tries to duplicate such behavior with
  git_fast_filter, they may be surprised unless they pass the --import-marks
  flag to git-fast-export.

